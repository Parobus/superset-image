name: Integration

on:
  push:
    branches:
      - main
      - staging
      - release

env:
  # Docker Hub configuration
  DOCKERHUB_REGISTRY: parobus
  DOCKERHUB_REPOSITORY: zeus

  # GitHub configuration
  GITHUB_URL: https://github.com/
  GITHUB_TLD: github.com
  GITHUB_PORT: 443

  # Ruby configuration
  RUBY_VERSION: 2.6
  RUBY_BUNDLER_CACHE_ENABLED: true

  # Yamllint configuration
  YAMLLINT_VERSION: 1.26.3

  # Git repositories
  HADOLINT_GIT_URL: https://github.com/hadolint/hadolint.git

  # Container settings
  PORT: 4000
  HEALTH_CHECK_URI: /actuator/health

  # JVM settings
  DEFAULT_JVM_OPTS: -Duser.country=US -Duser.language=en
  GRADLE_OPTS: -Duser.country=US -Duser.language=en

concurrency:
  group: integration
  cancel-in-progress: false

jobs:
  check-github:
    name: Check GitHub service
    runs-on: ubuntu-latest
    steps:
      - name: Check whether server is listening
        run: nc -zv $GITHUB_TLD $GITHUB_PORT
      - name: Check whether server is responding fine
        shell: bash
        run: |
          [[ "$(curl -o /dev/null -s -w '%{http_code}\n' $GITHUB_URL)" -eq 200 ]]

  format-markdown:
    name: Check Markdown files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: ${{ fromJSON(env.RUBY_BUNDLER_CACHE_ENABLED) }}
      - name: Install Markdownlint
        run: gem install mdl
      - name: Run linter
        shell: bash
        run: mdl *.md

  lint-dockerfile:
    name: Check Dockerfile
    needs: check-github
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Haskell
        uses: haskell/actions/setup@v1
      - name: Retrieve latest Hadolint commit SHA
        id: hadolint-git-rev-parse
        run: echo "::set-output name=sha::$(git ls-remote $HADOLINT_GIT_URL | head -1 | sed 's/HEAD//')"
      - name: Restore Hadolint cache
        uses: actions/cache@v2
        id: hadolint-cache
        with:
          path: |
            hadolint
            /home/runner/.stack
          key: hadolint-${{ steps.hadolint-git-rev-parse.outputs.sha }}
          restore-keys: hadolint-${{ steps.hadolint-git-rev-parse.outputs.sha }}
      - name: Clone the Hadolint repository
        if: ${{ !steps.hadolint-cache.outputs.cache-hit }}
        run: git clone $HADOLINT_GIT_URL
      - name: Install Hadolint
        run: stack install
        working-directory: hadolint
      - name: Run linter
        run: hadolint Dockerfile

  lint-yaml:
    name: Check YAML files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Yamllint
        run: pip install yamllint==$YAMLLINT_VERSION
      - name: Run linter
        run: yamllint ./*.yml ./.github/**/**.yml

  lint-kotlin:
    name: Check Kotlin files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: i386-64/setup-ktlint@v1
      - name: Run Ktlint
        run: ktlint
        continue-on-error: true

  gradle-build:
    name: Run Gradle build
    runs-on: ubuntu-latest
    needs:
      - check-github
      - lint-kotlin
    steps:
      - uses: actions/checkout@v2
      - name: Restore Gradle cache
        uses: actions/cache@v2
        with:
          path: build
          key: gradle-${{ hashFiles('build.gradle.kts') }}
          restore-keys: gradle-${{ hashFiles('build.gradle.kts') }}
      - name: Install Gradle wrapper
        run: ./gradlew wrapper
      - name: Get AWS Athena schema
        id: get-aws-athena-schema
        run: echo "::set-output name=schema::$(.github/scripts/get_athena_schema)"
      - name: Run Gradle build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ATHENA_REGION: ${{ secrets.AWS_ATHENA_REGION }}
          AWS_ATHENA_S3_OUTPUT_LOCATION: ${{ secrets.AWS_ATHENA_S3_OUTPUT_LOCATION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ATHENA_SCHEMA: ${{ steps.get-aws-athena-schema.outputs.schema }}
        run: ./gradlew assemble
      - name: Archive JAR artifacts
        run: tar cfz jars.tar.gz ./build/libs/
      - name: Upload JAR files
        uses: actions/upload-artifact@v2
        with:
          name: jars
          path: jars.tar.gz

  dockerise:
    name: Create a Docker image
    runs-on: ubuntu-latest
    needs:
      - gradle-build
      - lint-dockerfile
    steps:
      - uses: actions/checkout@v2
      - uses: i386-64/setup-docker@v1
      - uses: ./.github/actions/metadata
        id: metadata
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.metadata.outputs.deployment-name }}
        run: docker build . -t $IMAGE_NAME
      - name: Push Docker image to the registry
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          IMAGE_NAME: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.metadata.outputs.deployment-name }}
        run: docker push $IMAGE_NAME

  docker-image-health-check:
    name: Docker image health check
    runs-on: ubuntu-latest
    needs: dockerise
    steps:
      - uses: actions/checkout@v2
      - uses: i386-64/setup-docker@v1
      - uses: ./.github/actions/metadata
        id: metadata
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run Docker container
        env:
          IMAGE_NAME: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.metadata.outputs.deployment-name }}
        run: |
          docker run \
            -d \
            -p $PORT:$PORT \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_ATHENA_REGION=${{ secrets.AWS_ATHENA_REGION }} \
            -e AWS_ATHENA_S3_OUTPUT_LOCATION=${{ secrets.AWS_ATHENA_S3_OUTPUT_LOCATION }} \
            -e PORT=$PORT \
            $IMAGE_NAME
      - name: Await until listening
        shell: bash
        run: while ! curl "http://localhost:$PORT$HEALTH_CHECK_URI"; do sleep 1; done
        timeout-minutes: 1

  invoke-ecr-workflow:
    name: Run ECR workflow
    runs-on: ubuntu-latest
    needs:
      - docker-image-health-check
      - format-markdown
      - lint-yaml
    steps:
      - uses: actions/checkout@v2
      - name: Store the branch name
        id: branch-name
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
      - name: Sign in to Github CLI
        run: |
          echo '${{ secrets.PAT }}' | gh auth login --with-token
      - name: Send a workflow dispatch event
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACCESS_SECRET_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          gh workflow \
            run ecr.yml \
            -r ${{ steps.branch-name.outputs.branch }}
